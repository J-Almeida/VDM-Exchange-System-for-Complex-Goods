class ShopTest
instance variables
	private carType: ProductType;
	private carColor: Attribute;
	private carYear: Attribute;
	private car: Product;
	
	private stock: Stock;
operations
	private assertTrue: bool ==> ()
		assertTrue(cond) == return
		pre cond;
		
	private testProduct: () ==> () --create the attributes, product type and actual product for a car
		testProduct() == (
			--create a new type "Car", which can have a color
			carType:= new ProductType("Car");
			assertTrue(carType.name = "Car");
			carType.addAttributeAcceptance("color");
			carType.addAttributeAcceptance("year");
			assertTrue(carType.accepts("color"));
			assertTrue(carType.accepts("year"));
			assertTrue(carType.accepts("width") = false);
			
			--create new attributes of the type "Color" and "Year" for our example car
			carColor := new Attribute("color", "red");
			carYear := new Attribute("year", 2001);
			--check the getValue function
			assertTrue(carColor.getValue() = mk_token("red"));
			assertTrue(carYear.getValue() = mk_token(2001));
			--check the boundaries function
			assertTrue(carYear.checkBoundaries(2000, 2010)); 
			assertTrue(not carYear.checkBoundaries(1990, 2000));
			 --color is a string attribute, this must return false
			assertTrue(not carColor.checkBoundaries(1990, 2000));
			
			--now lets actually create a car
			car := new Product(carType);
			--and add a year and a color
			assertTrue(car.addAttribute(carColor));
			assertTrue(car.addAttribute(carYear));
			--create a false attribute, to check if it's rejected
			assertTrue(not car.addAttribute(new Attribute("width", 50)));
		);
		
	private testStock: () ==> ()
		testStock() == (
			stock := new Stock();
			stock.addProduct(car);
			assertTrue(car in set stock.products);
			stock.removeProduct(car);
			assertTrue(car not in set stock.products);
			
			stock.addProduct(car);
		);
		
public static main: () ==> ()
	main() == (
		dcl shopTest: ShopTest := new ShopTest();
		shopTest.testProduct();
		shopTest.testStock();
	);
end ShopTest